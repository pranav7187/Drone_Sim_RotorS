<launch>
    <!-- Arguments for the overall launch configuration -->
    <arg name="world_name" default="basic"/>
    <arg name="enable_logging" default="false"/>
    <arg name="enable_ground_truth" default="true"/>
    <arg name="debug" default="false"/>
    <arg name="gui" default="true"/>
    <arg name="paused" default="true"/>
    <arg name="verbose" default="false"/>
    <arg name="use_sim_time" default="true"/>
    <arg name="model" default="$(find payload_description)/urdf/payload.urdf.xacro"/>
    <arg name="enable_mavlink_interface" default="true"/>
    <arg name="tf_prefix" default="$(optenv ROS_NAMESPACE)"/>
    
 
    <!-- Gazebo environment variables -->
    <env name="GAZEBO_MODEL_PATH" value="${GAZEBO_MODEL_PATH}:$(find rotors_gazebo)/models"/>
    <env name="GAZEBO_RESOURCE_PATH" value="${GAZEBO_RESOURCE_PATH}:$(find rotors_gazebo)/models"/>

    <!-- Include the Gazebo empty world launch file -->
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <arg name="world_name" value="$(find rotors_gazebo)/worlds/$(arg world_name).world"/>
        <arg name="debug" value="$(arg debug)"/>
        <arg name="paused" value="$(arg paused)"/>
        <arg name="gui" value="$(arg gui)"/>
        <arg name="verbose" value="$(arg verbose)"/>
    </include>

    <!-- Define the robot description parameter -->
    
    <param name="robot_description" command="$(find xacro)/xacro --inorder '$(arg model)' enable_mavlink_interface:=$(arg enable_mavlink_interface) enable_ground_truth:=$(arg enable_ground_truth) enable_logging:=$(arg enable_logging)"/>
    <param name="tf_prefix" type="string" value="$(arg tf_prefix)" />
    <!-- Spawn the drones model from the URDF -->
    <node pkg="gazebo_ros" type="spawn_model" name="urdf_spawner" respawn="false" output="screen" args="-unpause -urdf -model robot -param robot_description"/>
   
    

    <!-- Single joint_state_publisher and robot_state_publisher for all -->
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher"/>
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"/>


    <!-- Nodes for controlling each drone -->
    <!-- <group ns="robot1">
        <node name="roll_pitch_yawrate_thrust_controller_node" pkg="rotors_control" type="roll_pitch_yawrate_thrust_controller_node" output="screen">
            <rosparam command="load" file="$(find rotors_gazebo)/resource/roll_pitch_yawrate_thrust_controller_firefly.yaml"/>
            <rosparam command="load" file="$(find rotors_gazebo)/resource/firefly.yaml"/>
            <remap from="odometry" to="odometry_sensor1/odometry"/>
        </node>
       
        
    </group>

    <group ns="robot2">
        <node name="roll_pitch_yawrate_thrust_controller_node" pkg="rotors_control" type="roll_pitch_yawrate_thrust_controller_node" output="screen">
            <rosparam command="load" file="$(find rotors_gazebo)/resource/roll_pitch_yawrate_thrust_controller_firefly.yaml"/>
            <rosparam command="load" file="$(find rotors_gazebo)/resource/firefly.yaml"/>
            <remap from="odometry" to="odometry_sensor1/odometry"/>
        </node>
 
 


        
    </group>
    <group ns="robot3">
        <node name="roll_pitch_yawrate_thrust_controller_node" pkg="rotors_control" type="roll_pitch_yawrate_thrust_controller_node" output="screen">
            <rosparam command="load" file="$(find rotors_gazebo)/resource/roll_pitch_yawrate_thrust_controller_firefly.yaml"/>
            <rosparam command="load" file="$(find rotors_gazebo)/resource/firefly.yaml"/>
            <remap from="odometry" to="odometry_sensor1/odometry"/>
        </node>

       


        
    </group>

    <group ns="robot4">
        <node name="roll_pitch_yawrate_thrust_controller_node" pkg="rotors_control" type="roll_pitch_yawrate_thrust_controller_node" output="screen">
            <rosparam command="load" file="$(find rotors_gazebo)/resource/roll_pitch_yawrate_thrust_controller_firefly.yaml"/>
            <rosparam command="load" file="$(find rotors_gazebo)/resource/firefly.yaml"/>
            <remap from="odometry" to="odometry_sensor1/odometry"/>
        </node>


        
    </group> -->



</launch>
